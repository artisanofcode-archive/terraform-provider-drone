---
kind: pipeline
name: Unit Test

platform:
  os: linux
  arch: amd64

steps:
- name: Unit Test
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go test -mod=vendor ./drone
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

---
kind: pipeline
name: Integration Test 0.10.6

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.10.6
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.10.6
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.10.6
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.10.6
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.10.6
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

---
kind: pipeline
name: Integration Test 0.10.7

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.10.7
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.10.7
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.10.7
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.10.7
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.10.7
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

---
kind: pipeline
name: Integration Test 0.10.8

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.10.8
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.10.8
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.10.8
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.10.8
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.10.8
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

---
kind: pipeline
name: Integration Test 0.11.9

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.11.9
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.11.9
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.11.9
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.11.9
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.11.9
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

---
kind: pipeline
name: Integration Test 0.11.10

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.11.10
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.11.10
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.11.10
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.11.10
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.11.10
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

---
kind: pipeline
name: Integration Test 0.11.11

platform:
  os: linux
  arch: amd64

steps:
- name: Setup Services
  image: alpine
  commands:
  - apk add --update curl
  - until nc -z gitea 3000; do sleep 5; done
  - sleep 5
  - until nc -z gitea 3000; do sleep 5; done
  - "until curl -f -u test:test -X POST -H \"Content-Type: application/json\" -d '{\"auto_init\":true,\"name\":\"test\",\"readme\":\"Default\"}' http://gitea:3000/api/v1/user/repos; do sleep 5; done"
  - sleep 5
  - "until curl -f -X POST -d 'username=test&password=test' http://drone/login; do sleep 5; done"

- name: Build Drone Provider
  image: golang:1.11-alpine
  commands:
  - apk add build-base
  - go build -mod=vendor
  - cp terraform-provider-drone ci/terraform.d/plugins/linux_amd64/terraform-provider-drone_v0.0.0
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup Before
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

- name: Test Repo Create
  image: hashicorp/terraform:0.11.11
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Update
  image: hashicorp/terraform:0.11.11
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp update/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.trusted|contains(true)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Create
  image: hashicorp/terraform:0.11.11
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp create/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets/fancy_pants | jq '.name|contains(\"fancy_pants\")'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Secret Delete
  image: hashicorp/terraform:0.11.11
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/secret.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq ."
  - "curl -H \"Authorization: Bearer $DRONE_TOKEN\" -sSf http://drone/api/repos/test/test/secrets | jq '.|select(length == 0)'\n"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Test Repo Delete
  image: hashicorp/terraform:0.11.11
  commands:
  - set -eo pipefail
  - apk add --update curl jq
  - cd ci
  - cp provider/provider.tf ./
  - cp delete/repo.tf ./
  - terraform init
  - terraform apply -auto-approve
  - "curl -sSf http://drone/api/repos/test/test | jq ."
  - "curl -sSf http://drone/api/repos/test/test | jq '.active|contains(false)'"
  environment:
    CGO_ENABLE: 0
    DRONE_SERVER: http://drone
    DRONE_TOKEN: 55f24eb3d61ef6ac5e83d550178638dc
    GO111MODULE: on
    TF_LOG: DEBUG

- name: Cleanup After
  image: alpine
  commands:
  - cd ci
  - "rm -rf *.tf .terraform terraform.tfstate*"

services:
- name: gitea
  image: gitea/gitea:latest
  commands:
  - "s6-svscan /etc/s6 &"
  - apk add sed
  - until nc -z localhost 3000; do sleep 5; done
  - until stat /data/gitea/conf/app.ini; do sleep 5; done
  - "sed -i -e 's/INSTALL_LOCK\\\\s*=\\\\s*false/INSTALL_LOCK = true/' /data/gitea/conf/app.ini"
  - "sed -i -e 's/\\\\[database\\\\]/[database]\\\\nLOG_SQL = false/' /data/gitea/conf/app.ini"
  - until killall gitea; do sleep 5; done
  - until nc -z localhost 3000; do sleep 5; done
  - "until gitea admin create-user --name test --password test --email test@test.local --admin --config /data/gitea/conf/app.ini; do sleep 5; done"
  - wait

- name: drone
  image: drone/drone:1.0.0-rc.3
  environment:
    DRONE_GITEA_SERVER: http://gitea:3000
    DRONE_GIT_PASSWORD: test
    DRONE_GIT_USER: test
    DRONE_RUNNER_CAPACITY: 1
    DRONE_SERVER_HOST: localhost
    DRONE_SERVER_PROTO: http
    DRONE_TLS_AUTOCERT: false
    DRONE_USER_CREATE: "username:test,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc"

depends_on:
- Unit Test

...
